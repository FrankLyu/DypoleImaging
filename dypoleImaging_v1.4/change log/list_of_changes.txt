V2 starting:

To do:
Write the presenter methods. set for things going up and update (or other) for things going down.


Mettre a jour setCameraPosition and setCameraType
self.startCamera_trigger et self.endCamera_trigger emballes dans la meme fonction: startStopCamera
layerTypeSelection function: do you need to make sure everything is settled before? Like no update pending?
layer1Button and the others have disappeared, should accomodate changes in the functions. Same with self.chosenLayerNumber
bigNcount2 and bigNcount3 to integralCountText and NCountText
self.fileInfoImageIDBox / fileInfoTimestampBox / fileInfoNCountBox need a new treatment as it is now only an array
Few commented things to settle
use the event EVT_TEXT pour l entree de texte dans le setMagnification et pixelSize

        # self.checkBoxSaveDummy.SetValue(False)
# self.SetIcon(wx.Icon('./icons/wxwin.ico', wx.BITMAP_TYPE_ICO))
# self.press= None find a new home for this one
# self.updateImageListBox()  This cannot be coming from self anymore
# self.FLIRCamera.SetValue(True) # doesn't exist anymore
self.autoReadToggleButton = wx.Button(self.panel, label = 'Auto Read')
# Should disable the auto read button if the camera used allows direct reading
# self.isFluorescence = False
hasFileSizeChanged = False everywhere  Is it needed?
        # Maybe re-add the apply defringing reset AOI and median Filter options
Changer tous les trucs du type: cursorXText = wx.StaticText(self.panel, label='X:') pour retirer le self.panel et mettre une wx.window qui est plus proche
        # imagesBoxSizer.Add(rotationBoxSizer, flag = wx.ALL | wx.EXPAND, border = 5)
        # self.initializeDummyData()

        # self.pixelToDistance = self.pixelSize / self.magnification * 10**-6


------------------------------------------------

Also need to check at which level we put the canvas so that it stays accessible without tons of . . . 

        public void databaseSaving(int imgWidth, int imgHeight, byte[] atomImageData, byte[] lightImageData, byte[] darkImageData)
        {


            //Image data for saving
            short[] atomArrayForSaving = new short[imgWidth * imgHeight];
            short[] lightArrayForSaving = new short[imgWidth * imgHeight];
            short[] darkArrayForSaving = new short[imgWidth * imgHeight];

            

            //DB saving if enabled
            if (saveToCache)
            {

               
                int currentSequenceID = dbHelper.getSequenceID();

                //For plotter
                //dbHelper.writeNCountsToDB(currentRunID, aCount);

                //MySqlCommand cmd = new MySqlCommand("INSERT INTO nCounts (nCount,xWidth,yWidth,xPos,yPos,runID_fk) VALUES (@nC,@widthX,@widthY,@xPos,@yPos,@runID)", AnalysisTableConnection);
                MySqlCommand cmd = new MySqlCommand("INSERT INTO nCounts (nCount,xWidth,yWidth,xPos,yPos,runID_fk,PSD) VALUES (@nC,@widthX,@widthY,@xPos,@yPos,@runID,@PSD)", AnalysisTableConnection);
                cmd.Prepare();
                cmd.Parameters.AddWithValue("nC", atomNum);
                cmd.Parameters.AddWithValue("widthX", cX[0, 2]);
                cmd.Parameters.AddWithValue("widthY", cY[0, 2]);
                cmd.Parameters.AddWithValue("xPos", cX[0, 1]);
                cmd.Parameters.AddWithValue("yPos", cY[0, 1]);
                cmd.Parameters.AddWithValue("runID", currentRunID);
                cmd.Parameters.AddWithValue("PSD", PSD);
                cmd.ExecuteNonQuery();
                //dbHelper.writeImageDataToDB(atomArrayForSaving, lightArrayForSaving, darkArrayForSaving, 5496, 1, 1, currentRunID, currentSequenceID);
                //Thread.Sleep(300);

                //For GA
                cmd = new MySqlCommand("UPDATE analysisResults SET nC = @nC, updated=1, xWidth = @widthX, yWidth = @widthY, xPos = @xPos, yPos = @yPos", GAConnection);
                cmd.Prepare();
                cmd.Parameters.AddWithValue("nC", atomNum);
                cmd.Parameters.AddWithValue("widthX", cX[0, 2]);
                cmd.Parameters.AddWithValue("widthY", cY[0, 2]);
                cmd.Parameters.AddWithValue("xPos", cX[0, 1]);
                cmd.Parameters.AddWithValue("yPos", cY[0, 1]);
                cmd.ExecuteNonQuery();

                Thread.Sleep(300);
                if (saveRealImage == 0)
                {
                    //If images are being saved, save real one:
                    //transfer data to the array for database saving
                    for (int j = 0; j < imgHeight; j++)
                    {
                        for (int i = 0; i < imgWidth; i++)
                        {
                            int k = i + j * imgWidth;

                            atomArrayForSaving[k] = (short)((atomImageData[2 * k + 1] << 8) | atomImageData[2 * k]);
                            lightArrayForSaving[k] = (short)((lightImageData[2 * k + 1] << 8) | lightImageData[2 * k]);
                            darkArrayForSaving[k] = (short)((darkImageData[2 * k + 1] << 8) | darkImageData[2 * k]);

                        }
                    }

                    dbHelper.writeImageDataToCache(atomArrayForSaving, lightArrayForSaving, darkArrayForSaving, 1832, 1224, 3, currentRunID, currentSequenceID);

                }
                else
                {   
                    //If only analysis is being saved, save fake 1x1 image
                    for (int j = 0; j < 1; j++)
                    {
                        for (int i = 0; i < 1; i++)
                        {
                            int k = i + j * imgWidth;

                            atomArrayForSaving[k] = (short)((atomImageData[2 * k + 1] << 8) | atomImageData[2 * k]);
                            lightArrayForSaving[k] = (short)((lightImageData[2 * k + 1] << 8) | lightImageData[2 * k]);
                            darkArrayForSaving[k] = (short)((darkImageData[2 * k + 1] << 8) | darkImageData[2 * k]);

                        }
                    }

                    dbHelper.writeImageDataToCache(atomArrayForSaving, lightArrayForSaving, darkArrayForSaving, 1, 1, 2, currentRunID, currentSequenceID);

                }
               
                dbHelper.updateNewImage();
                //dbHelper.writeImageDataToDB(atomArrayForSaving, lightArrayForSaving, darkArrayForSaving, 5496, 1, 1, currentRunID, currentSequenceID);
                //Thread.Sleep(300);

            }








----------------------------


        public double atomCount(int imgWidth, int imgHeight, byte[] atomImageData, byte[] lightImageData, byte[] darkImageData)
        {
            double lambda = 421 * 0.000000001;
            double sigma = 6 * (lambda / 2) * (lambda / 2) / 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982;

            double pixelSize = 2.4 * 0.000001 * binSize; 

            //Image data for saving
            //short[] atomArrayForSaving = new short[imgWidth * imgHeight];
            //short[] lightArrayForSaving = new short[imgWidth * imgHeight];
            //short[] darkArrayForSaving = new short[imgWidth * imgHeight];

            double meanLightLevel = 1;
            double meanAtomLevel = 1;

            //Scaling to deal with light level variations now that there is a PBS

           

            int scalingBoundx1 = secROIx1;
            int scalingBoundx2 = secROIx2;
            int scalingBoundy1 = secROIy1;
            int scalingBoundy2 = secROIy2;

            //Atom shot:
            double runningSum = 0;
            int numberofpixels = 0;
            for (int j = scalingBoundy1 - 1; j < scalingBoundy2; j++)
            {
                for (int i = scalingBoundx1 - 1; i < scalingBoundx2; i++)
                {
                    int k = (i + j * imgWidth) * 2;
                    runningSum += Convert.ToDouble((uint)((atomImageData[k + 1] << 8) | atomImageData[k]));
                    numberofpixels++;
                }
            }

            meanAtomLevel = runningSum / numberofpixels;

            //Light shot:
            runningSum = 0;
            numberofpixels = 0;
            for (int j = scalingBoundy1 - 1; j < scalingBoundy2; j++)
            {
                for (int i = scalingBoundx1 - 1; i < scalingBoundx2; i++)
                {
                    int k = (i + j * imgWidth) * 2;
                    runningSum += Convert.ToDouble((uint)((lightImageData[k + 1] << 8) | lightImageData[k]));
                    numberofpixels++;
                }
            }

            meanLightLevel = runningSum / numberofpixels;

           //meanLightLevel = 1;
           //meanAtomLevel = 1;

            //End scaling

            double aCount = 0;

            for (int j = ROIy1 - 1; j < ROIy2; j++)
            {
                for (int i = ROIx1 - 1; i < ROIx2; i++)
                {
                    int k = (i + j * imgWidth) * 2;

                    uint lightByte16 = (uint)((lightImageData[k + 1] << 8) | lightImageData[k]);
                    uint atomByte16 = (uint)((atomImageData[k + 1] << 8) | atomImageData[k]);
                    uint darkByte16 = (uint)((darkImageData[k + 1] << 8) | darkImageData[k]);          

                    double dividedByte16 = (Convert.ToDouble(Math.Max(((int)atomByte16 - (int)darkByte16), 1)) / Convert.ToDouble(Math.Max(((int)lightByte16*meanAtomLevel/meanLightLevel - (int)darkByte16), 1)));

                    if (Convert.ToDouble(Math.Max(lightByte16, 1)) / Convert.ToDouble(Math.Max(darkByte16, 1)) < 0)
                        dividedByte16 = 0;


                    aCount = aCount - pixelSize * pixelSize * Math.Log(dividedByte16) / sigma;

                }
            }

            
            /*
            //execute matlab code for TOF fitting
            
         
            
            //DB saving if enabled
            if (saveToCache)
            {

                //transfer data to the array for database saving
                for (int j = 0; j < imgHeight; j++)
                {
                    for (int i = 0; i < imgWidth; i++)
                    {
                        int k = i + j * imgWidth;

                        atomArrayForSaving[k] = (short)((atomImageData[2 * k + 1] << 8) | atomImageData[2 * k]);
                        lightArrayForSaving[k] = (short)((lightImageData[2 * k + 1] << 8) | lightImageData[2 * k]);
                        darkArrayForSaving[k] = (short)((darkImageData[2 * k + 1] << 8) | darkImageData[2 * k]);

                    }
                }

                int currentSequenceID = dbHelper.getSequenceID();

                //For plotter
                //dbHelper.writeNCountsToDB(currentRunID, aCount);
                MySqlCommand cmd = new MySqlCommand("INSERT INTO nCounts (nCount,xWidth,yWidth,xPos,yPos,runID_fk) VALUES (@nC,@widthX,@widthY,@xPos,@yPos,@runID)", AnalysisTableConnection);
                cmd.Prepare();
                cmd.Parameters.AddWithValue("nC", aCount);
                cmd.Parameters.AddWithValue("widthX", cX[0, 2]);
                cmd.Parameters.AddWithValue("widthY", cY[0, 2]);
                cmd.Parameters.AddWithValue("xPos", cX[0, 1]);
                cmd.Parameters.AddWithValue("yPos", cY[0, 1]);
                cmd.Parameters.AddWithValue("runID",currentRunID);
                cmd.ExecuteNonQuery();
                //dbHelper.writeImageDataToDB(atomArrayForSaving, lightArrayForSaving, darkArrayForSaving, 5496, 1, 1, currentRunID, currentSequenceID);
                //Thread.Sleep(300);

                //For GA
                cmd = new MySqlCommand("UPDATE analysisResults SET nC = @nC, updated=1, xWidth = @widthX, yWidth = @widthY, xPos = @xPos, yPos = @yPos", GAConnection);
                cmd.Prepare();
                cmd.Parameters.AddWithValue("nC", aCount);
                cmd.Parameters.AddWithValue("widthX", cX[0, 2]);
                cmd.Parameters.AddWithValue("widthY", cY[0, 2]);
                cmd.Parameters.AddWithValue("xPos", cX[0, 1]);
                cmd.Parameters.AddWithValue("yPos", cY[0, 1]);
                cmd.ExecuteNonQuery();

                Thread.Sleep(300);
                dbHelper.writeImageDataToCache(atomArrayForSaving, lightArrayForSaving, darkArrayForSaving, 1832, 1224, 3, currentRunID, currentSequenceID);
                dbHelper.updateNewImage();
                //dbHelper.writeImageDataToDB(atomArrayForSaving, lightArrayForSaving, darkArrayForSaving, 5496, 1, 1, currentRunID, currentSequenceID);
                //Thread.Sleep(300);

            }
            */
            return aCount;
        }


Reading function:

imgFunc_v6.readData: added the type "dbFile" to the list, and created the function readDatabaseFile(path)
Need to update the height, width in reshape to either put it as a property of the object, or a global variable from the config file.

self.fileType = "dbFile"   but check how coherent it is with self.checkLocalFiles

showImg: added an if self.checkLocalFiles
updateFileList(self): added an if self.checkLocalFiles

Big one in the general declaration:         if self.checkLocalFiles:
            localPath = LOCAL_PATH
            ### WINDOWS VERSION ####
            if (LOCAL_PATH[-2:] != "\\"):
                localPath = LOCAL_PATH + "\\"
            ### MAC VERSION ###
    #        if (LOCAL_PATH[-1:] != "/"):
    #            localPath = LOCAL_PATH + "/"
            self.today = datetime.date.today()
            self.path = localPath + str(self.today.year) + "\\" + str(self.today.month) + "\\" + str(self.today.day) + "\\"
    #        self.path = localPath + str(self.today.year) + "/" + str(self.today.month) + "/" + str(self.today.day) + "/"
    #        self.path = "D:\\Dropbox (MIT)\\BEC3-CODE\\imageAnalyze\\working branch\\fitting test\\thermal\\"
            if not os.path.exists(self.path):
                try:
                    os.makedirs(self.path)
                except:
                    self.path = "/Users/pierre/lsls"


In readDatabaseFile:
	cameraHeight, cameraWidth = functions.getCameraDimensions(path) # look at the config file to make sure there is no conflict zith height and width


def checkIfFileSizeChanged(self): added a self.checkLocalFiles

        if (self.chosenLayerNumber == 4):
            imageToShow = self.atomImage
        else:
            imageToShow = self.imageData[self.chosenLayerNumber - 1]

self.panel = wx.lib.scrolledpanel.ScrolledPanel(self, id = -1,  size=(-1, -1))
self.figure = Figure() and all its consequences.... Should I do the same with imagesBoxSizer = wx.StaticBoxSizer(imagesBox, wx.VERTICAL)?



11/17/2020

Adding a fake image when the image is 1x1 pixel
        img = Image.open('frankLloydWright.jpg')
        self.dummyImage = np.array(img)[:,:,0]
And in UpdatedImageOnUT:
        if self.isDummyImage:
            self.setCurrentImg(self.dummyImage, hasFileSizeChanged)
            self.currentImg.autoscale()
        else:


Commented out most of the setData function (eventually wasn't the issue)
in update1DProfile
        try:                           
            xMax = np.maximum(self.x_summed.max(), self.x_fitted.max())
            print('trying to max')
            xMin = np.minimum(self.x_summed.min(), self.x_fitted.min())
        except: 
            xMax = 1
            xMin = 0

Changed: self.x_width = 0 to self.x_width = 0.00001 (same for y) in update1DProfiles(self) because otherwise
In updateTrueWidth
        try:
            std_avg = (self.true_x_width_std/self.true_x_width + self.true_y_width_std/self.true_y_width)/2
        except Exception as ex:
            print(ex)
            std_avg = 0

Created the function initializeDummyData() called in the initialization precess as well as in setData where the variable isDummyImage toggles

        self.cameraType = "FLIR"  # FLIR or Andor
Something weird in setFileType function

New process function in the MyHandler class

I have the impression I can deleted all the wx.EVT_BUTTON in the fitImage function, as well as showImage as it doesn't seem to do anything...

        if not self.checkLocalFiles:
            for fileName in self.fileList:      # it's a bit weird that I do not need to reverse that one
                self.imageListBox.Append(str(fileName))
        
I should remove all the localPath references and put it in config




To do list:

Pass along the list of images to update contained in ui.monitor.func.listOfValidImagesWaiting to make the program read those data and update the image.
It could be that we read, delete the files (the deleting should be handled by the file manager part of the program, but think of how to pass along the data).
Maybe having a structure like:    FileManager <==> DataReader <==> UI
Understand why the plt.imshow takes 2 clicks to update, and verify that the correct image is plotted.
Rotation image crashes

11/23
Added new Camera object
Changed readData function in v6


To do list:
# readDBData should be reserved at reading fron the db. need to update the function

[defringing, self.betterRef] should be reviewed and understood => it is used if there is a better light shot somewhere I believe, set in the defringing function
 readapt readDBdata to pure DB versions
 self.camera = Camera("FLIR") # check if I can bind that to the original button position
defringing = self.checkApplyDefringing.GetValue() in setImageDataFile: I set it to False, otherwise the button raises and error, this should be fixed
Faire en sorte que mon ui.imageData qui contient le fichier image ne soit pas ecrase a chaque autoRun par fitImage.

11/24
Removed fileType variable 
filename got transformed into imageID
filenameText into imageIDText
fileIndex into imageIDIndex
modifiedFilename into modifiedImageID
setFilenameText into setImageIDText and got mostly commented out
updateLatestFilename into updateLatestImageID
updateFileList into updateImageIDList
fileList into imageIDList
checkIfFileSizeChanged(self) got almost commented out and hasFileSizeChanged got set to False
updateImageListBox(self) got almost commented out to remove checkLocalFiles

self.camera = Camera("FLIR") # check if I can bind that to the original button position => done with self.FLIRCamera.SetValue(True)

Changes in the wx.EVT_BUTTON:
ui.fitImage(wx.EVT_BUTTON) becomes ui.fitImage() and self.showImg(e) becomes showImg()

There are now 2 setData functions, one setDataNewIncomingFile that should only be called zhen a new incoming file arrives, that does not update the imageData from the imageID, and one setDataNewImageSelection that is called when there is a new image selection

Trying to rewrite the setCurrentImg function, basically only doing imshow

To do list:
Checking the box defringing raises error because of imageID
Faire en sorte que mon ui.imageData qui contient le fichier image ne soit pas ecrase a chaque autoRun par fitImage. => done
delete filetype variable => done
Should delete all the checkLocalFiles => they got commented out
dialog.GetFilename stayed like that, but could be removed
Need to understand             self.betterRef = self.defringer.defringedRef(self.imageID, self.imageIDIndex, num, setRoiIndex = True)
 defringing = self.checkApplyDefringing.GetValue() needs to be set to set to False otherwise it bugs during autoRun
There is a weird bug that appears sometime where the image file is already deleted and then we call delete(imagefile)

11/25

To do list:
Checking the box defringing raises error because of imageID
Should delete all the checkLocalFiles => they got commented out
dialog.GetFilename stayed like that, but could be removed
Need to understand             self.betterRef = self.defringer.defringedRef(self.imageID, self.imageIDIndex, num, setRoiIndex = True)
 defringing = self.checkApplyDefringing.GetValue() needs to be set to set to False otherwise it bugs during autoRun
There is a weird bug that appears sometime where the image file is already deleted and then we call delete(imagefile) => have put a condition on the file existing in the fnction, monitor if there is a bigger proble, why is the image already gone????

The image seem to only show the absorption image and not the 4 possibilities when we toggle => resolved by setting false in isDummyImage in the autoRun function
Very slow in the image plotting...


To do list:
Checking the box defringing raises error because of imageID
Should delete all the checkLocalFiles => they got commented out
dialog.GetFilename stayed like that, but could be removed
Need to understand             self.betterRef = self.defringer.defringedRef(self.imageID, self.imageIDIndex, num, setRoiIndex = True)
 defringing = self.checkApplyDefringing.GetValue() needs to be set to set to False otherwise it bugs during autoRun
There is a weird bug that appears sometime where the image file is already deleted and then we call delete(imagefile) => have put a condition on the file existing in the fnction, monitor if there is a bigger proble, why is the image already gone????
image = np.array(im, dtype = np.int8) # np.int8 should be adapted from a variable in the DB telling the pixel depth of the camera.
I haven't modified the self.atomShot that is probably now in an integer type, this should be modified to float.
More globally all the reading function to ensure it is an integer array that is saved to the DB
add secondary ROI
Correct this error:
File "C:\Users\Dypole_Imaging\Desktop\dypole-imaging\buildingDy.py", line 2153, in updateImageListBox
    self.imageListBox.Clear()
RuntimeError: wrapped C/C++ object of type ListBox has been deleted
Need to fix the imageList from the DB that doesn't correspond to the info showed in the setting box.
<<<<<<< HEAD

12/01/2020
The Camera doesn't trigger in the sequence except if we open the imageViewer on the command shell of anaconda, and the runHardwareTrigger on spyder
def getImageDatabase(imageID):
    sql_query = """SELECT atoms, noAtoms, dark FROM images WHERE imageID = """ + str(imageID) + """;"""
    byteArrayTuple = executeGetQuery(sql_query)
    return byteArrayTuple[0]    # returns a tuple of 3 bytearrays
seems to return a string, I modified it to get a byte but I'm suspicious something else is wrong


To do list:
Checking the box defringing raises error because of imageID
Should delete all the checkLocalFiles => they got commented out
dialog.GetFilename stayed like that, but could be removed
Need to understand             self.betterRef = self.defringer.defringedRef(self.imageID, self.imageIDIndex, num, setRoiIndex = True)
 defringing = self.checkApplyDefringing.GetValue() needs to be set to set to False otherwise it bugs during autoRun
There is a weird bug that appears sometime where the image file is already deleted and then we call delete(imagefile) => have put a condition on the file existing in the fnction, monitor if there is a bigger proble, why is the image already gone????
image = np.array(im, dtype = np.int8) # np.int8 should be adapted from a variable in the DB telling the pixel depth of the camera.
I haven't modified the self.atomShot that is probably now in an integer type, this should be modified to float.
More globally all the reading function to ensure it is an integer array that is saved to the DB
add secondary ROI
Correct this error:
File "C:\Users\Dypole_Imaging\Desktop\dypole-imaging\buildingDy.py", line 2153, in updateImageListBox
    self.imageListBox.Clear()
RuntimeError: wrapped C/C++ object of type ListBox has been deleted
Need to fix the imageList from the DB that doesn't correspond to the info showed in the setting box. => done, imageID is not directly extracted for getSelection()
Doesn't print the image if the fitting failed

Error with image: encoding or errors without a string argument : it is because on the image I loaded with real atoms, the atom and light shot get loaded as bytearray, whereas the dark is loaded as string => this is fixed in the dbFunctions, check the type before return

The absorption image of the fake image is always correct when you load the image from file, but not when you get it from the database

*To do list not urgent*:
Should delete all the checkLocalFiles => they got commented out
dialog.GetFilename stayed like that, but could be removed
Need to understand             self.betterRef = self.defringer.defringedRef(self.imageID, self.imageIDIndex, num, setRoiIndex = True)
 defringing = self.checkApplyDefringing.GetValue() needs to be set to set to False otherwise it bugs during autoRun
Checking the box defringing raises error because of imageID
There is a weird bug that appears sometime where the image file is already deleted and then we call delete(imagefile) => have put a condition on the file existing in the fnction, monitor if there is a bigger proble, why is the image already gone????
Correct this error:
File "C:\Users\Dypole_Imaging\Desktop\dypole-imaging\buildingDy.py", line 2153, in updateImageListBox
    self.imageListBox.Clear()
RuntimeError: wrapped C/C++ object of type ListBox has been deleted


To do list urgent:
image = np.array(im, dtype = np.int8) # np.int8 should be adapted from a variable in the DB telling the pixel depth of the camera.
I haven't modified the self.atomShot that is probably now in an integer type, this should be modified to float.
More globally all the reading function to ensure it is an integer array that is saved to the DB
add secondary ROI
Doesn't print the image if the fitting failed
The absorption image of the fake image is always correct when you load the image from file, but not when you get it from the database
